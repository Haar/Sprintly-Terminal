#!/usr/bin/env ruby
require 'gli'
require 'sly'

SLY_PROJECT = File.join(".sly", "project")

include GLI::App

program_desc 'Sly - A Sprint.ly Command Line Interface'

version Sly::VERSION

desc 'creates a .slyrc file in your home folder; used by Sprint.ly CLI for authenticating your requests.'
skips_pre
command :install do |c|
  c.action do |global_options,options,args|
    puts "Please enter your Sprint.ly username (email):"
    username = gets
    puts "Please enter your Sprint.ly API key:"
    api_key = gets
    Sly::Installer.process(username.strip, api_key.strip)
  end
end

desc 'setup the current folder to be associated with a Sprint.ly project.'
command :setup do |c|
  c.action do |global_options,options,args|
    manager =  Sly::ProjectManager.new
    $stdout.write "Please write the ID of the project to be associated with this folder:\n"
    $stdout.write manager.project_listings
    $stdout.write "\ni.e: 1234"
    $stdout.write "\n====================================\n"

    Sly::GUI.get_project_id(manager)
  end
end

desc 'shows the current backlog for the project.'
command :backlog do |c|
  arg_name :mine ,'mine Lists the items in the backlog which are assigned to you'
  arg_name :user, 'USER Lists the items in the backlog which are assigned to USER'
  c.action do |global_options,options,args|
    project = Sly::Project.load(SLY_PROJECT)
    project.update
    Sly::GUI.display_backlog(project)
  end
end

desc 'shows the current in-progress for the project.'
command :current do |c|
  c.action do |global_options,options,args|
    project = Sly::Project.load(SLY_PROJECT)
    project.update
    Sly::GUI.display_current(project)
  end
end

desc 'Setup git to for the target story id'
arg_name :id, 'the item id of the story you wish to branch for'
command :branch do |c|
  c.action do |global_options,options,args|
    Sly::Branch.for(args[0])
  end
end

desc 'Describe move here'
arg_name 'Describe arguments to move here'
command :move do |c|
  c.action do |global_options,options,args|
    puts "move command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  Sly::Installer.validate_install!
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
