#!/usr/bin/env ruby
require 'gli'
require 'sly'

SLY_PROJECT = File.join(".sly", "project")

include GLI::App

program_desc 'Sly - A Sprint.ly Command Line Interface'

version Sly::VERSION

skips_pre
desc 'creates a .slyrc file in your home folder; used by Sprint.ly CLI for authenticating your requests.'
command :install do |c|
  c.action do |global_options,options,args|
    puts "Please enter your Sprint.ly username (email):"
    username = gets
    puts "Please enter your Sprint.ly API key:"
    api_key = gets
    Sly::Installer.process(username.strip, api_key.strip)
  end
end

desc 'setup the current folder to be associated with a Sprint.ly project.'
command :setup do |c|
  c.action do |global_options,options,args|
    manager =  Sly::ProjectManager.new
    $stdout.write "Please write the ID of the project to be associated with this folder:\n"
    $stdout.write manager.project_listings
    $stdout.write "\ni.e: 1234"
    $stdout.write "\n====================================\n"

    Sly::GUI.get_project_id(manager)
  end
end

desc 'shows the current backlog for the project.'
command :backlog do |c|
  c.action do |global_options,options,args|
    project = Sly::Project.load(SLY_PROJECT)
    project.update("backlog")
    Sly::GUI.display_backlog(project)
  end
end

desc 'shows the current in-progress for the project.'
command :current do |c|
  c.action do |global_options,options,args|
    project = Sly::Project.load(SLY_PROJECT)
    project.update("in-progress")
    Sly::GUI.display_current(project)
  end
end

desc 'shows the complete items for the project.'
command :complete do |c|
  c.action do |global_options,options,args|
    project = Sly::Project.load(SLY_PROJECT)
    project.update("completed")
    Sly::GUI.display_complete(project)
  end
end

arg_name 'id'
desc 'Setup git branch for the target story id'
long_desc %/
  Provides the ability to automatically create a git branch for a Sprintly story.

ARGS

\e[1A
id - the # ref for the story you're wanting to branch

/

command :branch do |c|
  c.action do |global_options,options,args|
    Sly::Branch.for(args[0])
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  Sly::VersionChecker.run
  Sly::Installer.validate_install!
  true
end

# on_error do |exception|
#   # Error logic here
#   # return false to skip default error handling
#   false
# end

exit run(ARGV)
